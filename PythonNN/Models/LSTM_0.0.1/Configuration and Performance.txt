Accuracy 37%

Confusion Matrix:

[[ 4  4  0  0  0  0  0  1  0  1  1]
 [ 0 16  0  0  0  0  0  0  0  1  2]
 [ 0 14  2  1  0  0  0  0  0  2  4]
 [ 0  0  0  2 10  3  4  0  0  0  0]
 [ 0  0  0  1  4  1  6  0  0  0  0]
 [ 0  0  0  1  1 11  8  0  0  0  0]
 [ 0  0  0  1  3  8  8  0  0  0  0]
 [ 1  0  0  0  3  1  4  1  7  0  0]
 [ 1  0  0  0  4  1  6  0  9  0  0]
 [ 0  0  0  0  1  0  0  0  0  3 15]
 [ 0  1  0  0  0  0  0  0  0  0 13]]


class EEG_LSTMClassifier(nn.Module):
    def __init__(self, input_size=20, hidden_size=32, num_layers=2, num_classes=11, dropout=0.3):
        super(EEG_LSTMClassifier, self).__init__()

        self.lstm = nn.LSTM(
            input_size=input_size,
            hidden_size=hidden_size,
            num_layers=num_layers,
            batch_first=True,
            dropout=dropout
        )
        
        self.fc = nn.Sequential(
            nn.Linear(hidden_size, 32),
            nn.ReLU(),
            nn.Dropout(dropout),
            nn.Linear(32, num_classes)
        )

    def forward(self, x):
        # x: (batch_size, time_steps, features)
        lstm_out, _ = self.lstm(x)  # lstm_out: (batch, time_steps, hidden_size)
        
        # Take the output from the last time step
        last_output = lstm_out[:, -1, :]  # shape: (batch_size, hidden_size)

        out = self.fc(last_output)  # shape: (batch_size, num_classes)
        return out

Features:
0.5 time segments in 2 second window
Each segment contains features: Hjorth Mobility and Complexity, Alpha bandpower, beta bandpower, RMS