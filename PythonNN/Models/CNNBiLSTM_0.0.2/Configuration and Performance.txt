Confusion Matrix:
 [[22  0  0  0  0  0  0  0  1  0  1]
 [ 0 13 17  1  1  0  0  0  0  1  0]
 [ 0  4 15  0  1  1  2  0  0  0  1]
 [ 0  1  0 16 13  3  1  0  1  0  0]
 [ 1  1  1  5 10  0  3  1  0  0  0]
 [ 0  2  0  2  2 12  9  0  0  0  0]
 [ 0  0  1  2  4  4 18  0  1  0  0]
 [ 0  0  0  1  0  0  3 12 13  1  0]
 [ 0  0  0  0  0  1  3 10 19  0  0]
 [ 0  2  0  0  1  0  1  0  1 35 14]
 [ 0  1  0  0  0  0  0  0  0 22 23]]

Classification Report:
               precision    recall  f1-score   support

           0      0.957     0.917     0.936        24
           1      0.542     0.394     0.456        33
           2      0.441     0.625     0.517        24
           3      0.593     0.457     0.516        35
           4      0.312     0.455     0.370        22
           5      0.571     0.444     0.500        27
           6      0.450     0.600     0.514        30
           7      0.522     0.400     0.453        30
           8      0.528     0.576     0.551        33
           9      0.593     0.648     0.619        54
          10      0.590     0.500     0.541        46

    accuracy                          0.545       358
   macro avg      0.554     0.547     0.543       358
weighted avg      0.559     0.545     0.545       358

Model

class MultiResBlock(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(MultiResBlock, self).__init__()
        self.branch1 = nn.Sequential(
            nn.Conv1d(in_channels, out_channels, kernel_size=2, stride=2, padding=1),
            nn.BatchNorm1d(out_channels),
            nn.ReLU()
        )
        self.branch2 = nn.Sequential(
            nn.Conv1d(in_channels, out_channels, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm1d(out_channels),
            nn.ReLU()
        )
        self.branch3 = nn.Sequential(
            nn.Conv1d(in_channels, out_channels, kernel_size=8, stride=2, padding=3),
            nn.BatchNorm1d(out_channels),
            nn.ReLU()
        )

    def forward(self, x):
        # Run parallel conv branches
        x1 = self.branch1(x)  # (B, C, T//2)
        x2 = self.branch2(x)
        x3 = self.branch3(x)
        min_len = min(x1.shape[2], x2.shape[2], x3.shape[2])
        x1 = x1[:, :, :min_len]
        x2 = x2[:, :, :min_len]
        x3 = x3[:, :, :min_len]
        return torch.cat([x1, x2, x3], dim=1)  # (B, C*3, T//2)

class CNN2BlockBiLSTMClassifier(nn.Module):
    def __init__(self, num_classes=11):
        super(CNN2BlockBiLSTMClassifier, self).__init__()

        # Block 1: Input (B, 4, 500) → (B, 96, 250)
        self.block1 = MultiResBlock(in_channels=4, out_channels=32)

        # Block 2: Input (B, 96, 250) → (B, 96, 125)
        self.block2 = MultiResBlock(in_channels=96, out_channels=64)

        # LSTM input: (B, 125, 96*2)
        self.lstm = nn.LSTM(input_size=192, hidden_size=150,num_layers=2, batch_first=True, bidirectional=True)

        self.bn = nn.BatchNorm1d(300)  # 32 * 2 from BiLSTM

        self.classifier = nn.Sequential(
            nn.Linear(300, 32),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(32, num_classes)
        )

    def forward(self, x):
        x = self.block1(x)               # (B, 96, 250)
        x = self.block2(x)               # (B, 96, 125)
        x = x.permute(0, 2, 1)           # (B, 125, 96) → time-major for LSTM

        _, (hn, _) = self.lstm(x)        # hn: (2, B, 32)
        hn = torch.cat((hn[0], hn[1]), dim=1)  # (B, 64)

        hn = self.bn(hn)
        return self.classifier(hn)



Features Raw data

Epochs: 500